name: SonarScanner
on:
  push:
    branches:
      - '**' # or the name of your main branch
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  SonarScanner:
    name: SonarScanner
    runs-on: [ self-hosted ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          PROJECT_NAME=${{ github.repository	}}
          PROJECT_NAME=${PROJECT_NAME/\//_}
          BRANCH_NAME=${GITHUB_REF##*/}
          PR_BASE=master # The long-lived branch into which the PR will be merged
          GET_BINDING=api/alm_settings/get_binding
          SET_BINDING=api/alm_settings/set_github_binding
          echo BRANCH_NAME = $BRANCH_NAME
          echo PROJECT_NAME = $PROJECT_NAME
          echo github.repository	= ${{ github.repository	}}
          echo GITHUB_PR = ${{ github.event.number }}
          echo GITHUB_HEAD_REF = ${{ github.head_ref }}
          echo ::set-output name=PROJECT_NAME::${PROJECT_NAME}
          echo ::set-output name=BRANCH_NAME::${BRANCH_NAME}
          echo ::set-output name=PR_BASE::${PR_BASE}

          SONAR_B64T=$(echo -n ${SONAR_TOKEN}: | base64)
          echo ::set-output name=SONAR_B64T::${SONAR_B64T}
          echo ::set-output name=GET_BINDING::${GET_BINDING}
          echo ::set-output name=SET_BINDING::${SET_BINDING}
      - name: Checking Sonarqube configs
        shell: bash
        run: |
          # Output Sonarqube project binding to file that can be parse for errors.
          curl  --location -XGET "${SONAR_HOST_URL}/${{ steps.vars.outputs.GET_BINDING }}?project=${{ steps.vars.outputs.PROJECT_NAME }}" -H 'Authorization: Basic ${{ steps.vars.outputs.SONAR_B64T }}' >> sq_get_binding.json;

          # If json is returning error indicating SQ project not bound to github repo, then bind it. Otherwise, output the bound project name.
          if (jq -e '.errors | .[] | .msg' sq_get_binding.json  >/dev/null 2>&1); 
          then 
            string=$(jq '.errors | .[] | .msg' sq_get_binding.json);
            if [[ $string == *"is not bound to any ALM"* ]];
            then 
              echo "Project not bound. Binding to ${{ steps.vars.outputs.PROJECT_NAME }}.";
              curl --location -XPOST "${SONAR_HOST_URL}/${{ steps.vars.outputs.SET_BINDING }}?almSetting=SonarQube-TestEngPRChecks&project=${{ steps.vars.outputs.PROJECT_NAME }}&repository=${{ github.repository }}&summaryCommentEnabled=true" \
              -H 'Authorization: Basic ${{ steps.vars.outputs.SONAR_B64T }}';
            fi

          else
            string=$(jq '.repository' sq_get_binding.json);
            printf "\nProject bound to $string\n\n";
          fi
      - name: SonarQube Scan (PR)
        if: ${{ github.event.number != null }}
        uses: SonarSource/sonarqube-scan-action@v1.0.0
        with:
          args: >
            -Dsonar.projectKey=${{ steps.vars.outputs.PROJECT_NAME }}
            -Dsonar.projectName=${{ steps.vars.outputs.PROJECT_NAME }}
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ steps.vars.outputs.PR_BASE }}
            -Dsonar.pullrequest.github.repository=${{ github.repository	}}
      - name: SonarQube Scan (Branch)
        if: ${{ github.event.number == null }}
        uses: SonarSource/sonarqube-scan-action@v1.0.0
        with:
          args: >
            -Dsonar.projectKey=${{ steps.vars.outputs.PROJECT_NAME }}
            -Dsonar.branch.name=${{ steps.vars.outputs.BRANCH_NAME }} 
            -Dsonar.projectName=${{ steps.vars.outputs.PROJECT_NAME }}
